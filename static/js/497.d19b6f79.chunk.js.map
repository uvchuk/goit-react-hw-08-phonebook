{"version":3,"file":"static/js/497.d19b6f79.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Section/Section.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { TextField } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const ValidationTextField = styled(TextField)({\n  '& input:valid + fieldset': {\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  '& input:invalid + fieldset': {\n    borderColor: 'red',\n    borderWidth: 2,\n  },\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/selectors';\nimport { addContactThunk } from 'redux/operations';\nimport { Typography } from '@mui/material';\nimport { Button } from '@mui/joy';\nimport SendIcon from '@mui/icons-material/Send';\nimport { ValidationTextField } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    if (checkIfExist(name))\n      return alert('This contact is exist in your phonebook!');\n    dispatch(addContactThunk({ name, number }));\n    form.reset();\n  };\n\n  const checkIfExist = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h2\" sx={{ mt: 2 }}>\n        Save new contact to your's PhoneBook!\n      </Typography>\n      <form\n        onSubmit={onSubmit}\n        style={{ display: 'flex', flexDirection: 'column' }}\n      >\n        <ValidationTextField\n          id=\"name\"\n          label=\"Name\"\n          variant=\"outlined\"\n          helperText=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer\"\n          inputProps={{\n            inputMode: 'text',\n            pattern:\n              \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n          }}\n          sx={{ mt: 2, maxWidth: '500px' }}\n          required\n        ></ValidationTextField>\n        <ValidationTextField\n          id=\"number\"\n          label=\"Number\"\n          variant=\"outlined\"\n          helperText=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          inputProps={{\n            inputMode: 'numeric',\n            pattern: '[+]?[0-9]*',\n          }}\n          sx={{ mt: 2, maxWidth: '500px' }}\n          required\n        ></ValidationTextField>\n        <Button\n          sx={{ width: 200, mt: 2 }}\n          loading={isLoading}\n          loadingPosition=\"end\"\n          endDecorator={isLoading && <SendIcon />}\n          variant=\"solid\"\n          disabled={isLoading}\n          type=\"submit\"\n        >\n          {isLoading ? 'Send' : 'Add to contacts'}\n        </Button>\n      </form>\n    </>\n  );\n};\n","import './Section.module.css';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section>\n      {title && <h2>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <label>\n      <p>Find contacts by name</p>\n      <input\n        name=\"filter\"\n        type=\"text\"\n        onChange={evt => dispatch(filterContact(evt.target.value))}\n      />\n    </label>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectIsLoading } from 'redux/selectors';\nimport { deleteContactThunk } from 'redux/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  return (\n    <li>\n      <span>\n        {name}: <span>{number}</span>\n      </span>\n      <button\n        type=\"button\"\n        disabled={isLoading}\n        onClick={() => {\n          dispatch(deleteContactThunk(id));\n        }}\n      >\n        {isLoading ? <span>Loading...</span> : <span>Delete</span>}\n      </button>\n    </li>\n  );\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul>\n      {filteredContacts?.map(contact => (\n        <Contact key={contact.id} {...contact} />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Contact } from 'components/Contact/Contact';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  return (\n    <>\n      <ContactForm></ContactForm>\n      {contacts.length > 0 && (\n        <Section title={'Contacts'}>\n          <Filter />\n          <ContactList>\n            <Contact />\n          </ContactList>\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ValidationTextField","styled","TextField","borderColor","borderWidth","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","isLoading","selectIsLoading","checkIfExist","name","find","contact","toLowerCase","_jsxs","_Fragment","children","_jsx","Typography","variant","component","sx","mt","onSubmit","evt","preventDefault","form","target","elements","value","number","alert","addContactThunk","reset","style","display","flexDirection","id","label","helperText","inputProps","inputMode","pattern","maxWidth","required","Button","width","loading","loadingPosition","endDecorator","SendIcon","disabled","type","Section","_ref","title","Filter","onChange","filterContact","Contact","onClick","deleteContactThunk","ContactList","filteredContacts","selectFilteredContacts","map","_objectSpread","length"],"sourceRoot":""}